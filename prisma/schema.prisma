// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npm i -D prisma
//npx prisma init
//npx prisma generate - Do this after creating a new model
//npx prisma db push - to push to your database.
//npx prisma migrate reset - to reset your databse.
//npx prisma studio - to view your data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  SELLER
}

enum storeStatus {
  PENDING
  REVIEWING
  APPROVED
  DECLINED
  CLOSED
}

enum ProductStatus {
  PENDING
  REVIEWING
  APPROVED
  DECLINED
  ARCHIVED
}

enum QueryStatus {
  NEW
  REVIEWING
  AWAITINGRESPONSE
  PROCESSING
  RESOLVED
  NOTRESOLVED
  CANCELLED
  CLOSED
  REFUNDISSUED
  RETURNINITIAED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  FAILED
}

model User {
  id String @id @default(cuid()) 
  name String? 
  email String? @unique
  emailVerified DateTime? 
  image String?
  hashedPassword String?
  role UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)

  twoFactorConfirmation TwoFactorConfirmation?

  accounts Account[]
  stores Store[]
  products Product[]
  reviews Review[]
  orders Order[]
  cart Cart[]
  queries Query[]
  messages Message[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store{
  id String @id @default(cuid())
  userId String
  name String
  email String @unique
  emailVerified DateTime? 
  country String
  postcode String
  logo String?
  description String?
  status storeStatus @default(PENDING)
  statusFeedback String @default("Your request to open store has been submitted for approval")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products Product[]
  sizes Size[]
  category Category[]
  color Color[]
  reviews Review[]
  orderItems OrderItem[]
  Banners Banner[]

  @@index([userId])
}

model Banner{
  id String @id @default(cuid())
  storeId String
  name String
  image String
  active Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model StoreVerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Product{
  id String @id @default(cuid())
  userId String
  storeId String
  name String
  categoryId String
  description String
  status ProductStatus @default(PENDING)
  statusFeedback String @default("Your product has been submitted for approval")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  productItems ProductItem[]
  reviews Review[]
  orderItems OrderItem[]
  availableItems Available[]
  cartItems CartItem[]


  @@index([userId])
  @@index([storeId])
  @@index([categoryId])
  @@index([name])
  @@index([status])
}

model Category{
  id String @id @default(cuid())
  storeId String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products Product[]

  @@index([storeId])
}

model Available{
  id String @id @default(cuid())
  sizeId String
  numInStocks Int
  productId String
  productItemId String
  currentPrice Float
  originalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  size Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productItem ProductItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)

  cartItems CartItem[]

  @@index([sizeId])
  @@index([productId])
  @@index([productItemId])
}

model ProductItem{
  id String @id @default(cuid())
  productId String
  colorIds String[] @default([])
  images String[]
  discount Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  availableItems Available[]
  cartItems CartItem[]

  @@index([productId])
}

model Color{
  id String @id @default(cuid())
  storeId String
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([name])
}

model Size{
  id String @id @default(cuid())
  storeId String
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  availableItems Available[]

  @@index([storeId])
  @@index([name])
}

model Review{
  id String @id @default(cuid())
  userId String
  storeId String
  productId String
  value Int
  reason String
  comment String
  helpful String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([storeId])
  @@index([productId])
}

model Cart{
  id String @id @default(cuid())
  userId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartItems CartItem[]

  @@index([userId])
}

model CartItem{
  id String @id @default(cuid())
  cartId String 
  productId String
  productItemId String
  availableItemId String
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productItem ProductItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)
  availableItem Available @relation(fields: [availableItemId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, productItemId, availableItemId], name: "cartId_productId_productItemId_availableItemId")
}

model Query{
  id String @id @default(cuid())
  userId String
  ticketNumber String @default(cuid()) @unique
  status QueryStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([userId])
  @@index([ticketNumber])
}

model Message{
  id String @id @default(cuid())
  queryId String
  userId String
  text String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  query Query @relation(fields: [queryId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([queryId])
  @@index([userId])
}

model Order{
  id String @id @default(cuid())
  userId String
  address String
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  OrderItem OrderItem[]

  @@index([userId])
}

model OrderItem{
  id String @id @default(cuid())
  orderId String
  storeId String
  productId String
  productItemId String
  sizeId String
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  size Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productItem ProductItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([storeId])
  @@index([productId])
  @@index([productItemId])
  @@index([sizeId])
}


